;;; semantic/wisent/clojure.wy -- LALR grammar for Clojure
;;
;; Copyright (C) 
;;
;; Author:
;; Maintainer:
;; Created:
;; Keywords: syntax
;;
;; This file is not part of GNU Emacs.
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 2, or (at
;; your option) any later version.
;;
;; This software is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.

%package wisent-clojure-wy
%provide clojure-wy

%languagemode clojure-mode

;; The default goal.
%start sexpr
%start list_content_opt
%start argument
%start fn_content_simple_arity

;; -----------------------------
;; Block & Parenthesis terminals
;; -----------------------------
%type  <block>       ;;syntax "\\s(\\|\\s)" matchdatatype block

%token <block>       PAREN_BLOCK "(LPAREN RPAREN)"
%token <block>       BRACE_BLOCK "(LBRACE RBRACE)"
%token <block>       BRACK_BLOCK "(LBRACK RBRACK)"

%token <open-paren>  LPAREN      "("
%token <close-paren> RPAREN      ")"
%token <open-paren>  LBRACE      "{"
%token <close-paren> RBRACE      "}"
%token <open-paren>  LBRACK      "["
%token <close-paren> RBRACK      "]"

;; ------------------
;; Operator terminals
;; ------------------
%type  <punctuation> ;;syntax "\\(\\s.\\|\\s$\\|\\s'\\)+" matchdatatype string

%token <punctuation> META_READER         "#^"
%token <punctuation> VAR_READER          "#'"
%token <punctuation> SET_READER          "#{"
%token <punctuation> FN_READER           "#("
%token <punctuation> EVAL_READER         "#="
%token <punctuation> COMMENT_READER      "#!"
%token <punctuation> UNREADABLE_READER   "#<"
%token <punctuation> DISCARD_READER      "#_"
%token <punctuation> METADATA            "^"

;; -----------------
;; Literal terminals
;; -----------------
%type  <symbol>      ;;syntax "\\(\\sw\\|\\s_\\)+"


%token <symbol>      IDENTIFIER

%token <symbol>      NS "\\`ns\\'"

%type  <string>      ;;syntax "\\s\"" matchdatatype sexp
%token <string>      STRING_LITERAL

%type  <number>      ;;syntax semantic-lex-number-expression
%token <number>      NUMBER_LITERAL

;; -----------------
;; Keyword terminals
;; -----------------
;; Generate a keyword analyzer
%type  <keyword> ;;syntax "\\(\\sw\\|\\s_\\)+" matchdatatype keyword


%keyword THROW        "throw"
%put     THROW summary
"throw"

;; Token generated by external lexers
%token DEFN
%token DEF

%%

sexpr: PAREN_BLOCK
       (EXPANDFULL $1 list_content_opt) ;; TODO replace by EXPAND and adds LPAREN RPAREN ?
     | IDENTIFIER
     | NUMBER_LITERAL
     | STRING_LITERAL
  ;

list_content_opt: ;; empty
                | list_content
                ;

list_content: DEF metadata_defs_opt IDENTIFIER list_content_opt
              (VARIABLE-TAG $3 nil nil)
            | DEFN metadata_defs_opt IDENTIFIER doc_string_opt metadata_defs_opt fn_content_def
              (FUNCTION-TAG $3 nil $6)
            | NS metadata_defs_opt IDENTIFIER
              (PACKAGE-TAG $3 nil)
            | sexpr
            | sexpr list_content 
    ;

doc_string_opt: ;; empty
              | STRING_LITERAL
              ;

metadata_defs_opt: ;; empty
                 | metadata_defs
                 ;

metadata_defs: metadata_def
             | metadata_defs metadata_def
             ;

metadata_def: METADATA BRACE_BLOCK
            | METADATA IDENTIFIER
              (list $2)
            ;

fn_content_simple_arity: BRACK_BLOCK
                         (EXPANDFULL $1 argument)
                       ;

fn_content_multi_arity: PAREN_BLOCK
                        (EXPANDFULL $1 fn_content_simple_arity)
                      ;

fn_content_def: fn_content_simple_arity
              | fn_content_multi_arity
              ;

argument: IDENTIFIER
          (VARIABLE-TAG $1 nil nil)
        | metadata_def IDENTIFIER
          (VARIABLE-TAG $2 (car $1) nil)
        ;

%%


;;; semantic/wisent/clojure.wy ends here
