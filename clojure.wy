;;; semantic/wisent/clojure.wy -- LALR grammar for Clojure
;;
;; Copyright (C) 
;;
;; Author:
;; Maintainer:
;; Created:
;; Keywords: syntax
;;
;; This file is not part of GNU Emacs.
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 2, or (at
;; your option) any later version.
;;
;; This software is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.

%package wisent-clojure-wy
%provide clojure-wy

%languagemode clojure-mode

;; The default goal.
%start sexpr
%start list
%start arguments_list

;; -----------------------------
;; Block & Parenthesis terminals
;; -----------------------------
%type  <block>       ;;syntax "\\s(\\|\\s)" matchdatatype block

%token <block>       PAREN_BLOCK "(LPAREN RPAREN)"
%token <block>       BRACE_BLOCK "(LBRACE RBRACE)"
%token <block>       BRACK_BLOCK "(LBRACK RBRACK)"

%token <open-paren>  LPAREN      "("
%token <close-paren> RPAREN      ")"
%token <open-paren>  LBRACE      "{"
%token <close-paren> RBRACE      "}"
%token <open-paren>  LBRACK      "["
%token <close-paren> RBRACK      "]"

;; ------------------
;; Operator terminals
;; ------------------
%type  <punctuation> ;;syntax "\\(\\s.\\|\\s$\\|\\s'\\)+" matchdatatype string

%token <punctuation> META_READER         "#^"
%token <punctuation> VAR_READER          "#'"
%token <punctuation> SET_READER          "#{"
%token <punctuation> FN_READER           "#("
%token <punctuation> EVAL_READER         "#="
%token <punctuation> COMMENT_READER      "#!"
%token <punctuation> UNREADABLE_READER   "#<"
%token <punctuation> DISCARD_READER      "#_"
%token <punctuation> METADATA            "^"

;; -----------------
;; Literal terminals
;; -----------------
%type  <symbol>      ;;syntax "\\(\\sw\\|\\s_\\)+"


%token <symbol>      IDENTIFIER

%token <symbol>      DEF "\\`def\\'"
%token <symbol>      NS "\\`ns\\'"

%type  <string>      ;;syntax "\\s\"" matchdatatype sexp
%token <string>      STRING_LITERAL

%type  <number>      ;;syntax semantic-lex-number-expression
%token <number>      NUMBER_LITERAL

;; -----------------
;; Keyword terminals
;; -----------------
;; Generate a keyword analyzer
%type  <keyword> ;;syntax "\\(\\sw\\|\\s_\\)+" matchdatatype keyword


%keyword THROW        "throw"
%put     THROW summary
"throw"

;; Token generated by external lexers
%token DEFN

%%

sexpr: PAREN_BLOCK
       (EXPANDFULL $1 list) ;; TODO replace by EXPAND and adds LPAREN RPAREN ?
  ;

list: DEF IDENTIFIER
      (VARIABLE-TAG $2 nil nil)
    | DEF metadata_def IDENTIFIER
      (VARIABLE-TAG $3 nil nil)
    | DEFN IDENTIFIER arguments_block
      (FUNCTION-TAG $2 nil $3)
    | NS metadata_def_opt IDENTIFIER
      (PACKAGE-TAG $3 nil)
    ;

metadata_def_opt: ;; empty
                | metadata_def
                ;

metadata_def: METADATA BRACE_BLOCK
            ;

arguments_block: BRACK_BLOCK
                 (EXPAND $1 arguments_list)
               ;

arguments_list: LBRACK arguments_def_opt RBRACK
                (identity $2)
              ;

arguments_def_opt: ;; empty
                 | arguments_def
                   (identity $1)
                 ;

arguments_def: argument
               (list $1)
             | argument arguments_def
               (cons $1 $2)
             ;

argument: IDENTIFIER
          (EXPANDTAG
           (VARIABLE-TAG $1 nil nil))
        ;

%%


;;; semantic/wisent/clojure.wy ends here
