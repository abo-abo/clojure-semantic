;;; semantic/wisent/clojure.wy --- Grammar of the Clojure programming language

;; Copyright (C) 2012

;; Author: 
;; Maintainer: 
;; Created: 
;; Keywords: syntax

;; This file is not part of GNU Emacs.

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 2, or (at
;; your option) any later version.

;; This program is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.

%package wisent-clojure-wy
%provide semantic/wisent/clojure-wy

%languagemode  clojure-mode
%start         clojure-expr
        
%token <number> NUMBER
%token <symbol> SYMBOL
%token <ratio> RATIO
%token <meta> META

%token <set_reader> SET_READER

%type  <keyword>

%keyword DEF     "def"
%keyword DEFN    "defn"
%keyword DEFN-   "defn-"

%type  <block>       ;;syntax "\\s(\\|\\s)" matchdatatype block
%token <block>       PAREN_BLOCK "(LPAREN RPAREN)"
%token <block>       BRACE_BLOCK "(LBRACE RBRACE)"
%token <block>       BRACK_BLOCK "(LBRACK RBRACK)"

%token <open-paren>  LPAREN  "("
%token <close-paren>  RPAREN ")"

%token <open-paren>  LBRACE  "{"
%token <close-paren> RBRACE  "}"

%token <open-paren>  LBRACK  "["
%token <close-paren> RBRACK  "]"

%type  <string>
%token <string>      STRING

%type  <reader> syntax "#[^ \t\n]" matchdatatype string

%token <reader> META_READER         "#^"
%token <reader> VAR_READER          "#'"
%token <reader> SET_READER          "#{"
%token <reader> FN_READER           "#("
%token <reader> EVAL_READER         "#="
%token <reader> COMMENT_READER      "#!"
%token <reader> UNREADABLE_READER   "#<"
%token <reader> DISCARD_READER      "#_"

%%

clojure-expr: atom
            | list
            | map
            | vector
            | set
            ;

list: LPAREN coll-content RPAREN
      (list 'LIST $2)
    | LPAREN RPAREN
      (list 'LIST)
    ;

map: LBRACE coll-content RBRACE
     (list 'MAP $2)
   | LBRACE RBRACE
     (list 'MAP)
     ;

vector: LBRACK coll-content RBRACK
        (list 'VECTOR $2)
      | LBRACK RBRACK
        (list 'VECTOR)
    ;

set: SET_READER coll-content RBRACE
     (list 'SET $2)
   | SET_READER RBRACE
     (list 'SET)
     ;

coll-content: clojure-expr
            | DEF SYMBOL clojure-expr
              (list 'DEF $2)
            | DEFN SYMBOL clojure-expr
              (list 'DEFN $2)
            | DEFN- SYMBOL clojure-expr
              (list 'DEFN- $2)
            | coll-content clojure-expr
              (append $1 $2)
            ;; | ;; empty
            ;;   (list 'EMPTY)
            ;

atom: SYMBOL
      (list (make-symbol $1))
    | RATIO
      (list (make-symbol $1))
    | NUMBER
      (list (make-symbol $1))
    | STRING
      (list (make-symbol $1))
    ;

%%

(defun wisent-clojure-setup-parser ()
  "Setup buffer for parse."
  (wisent-clojure-wy--install-parser)
  (setq semantic-lex-analyzer 'wisent-clojure-lexer
        semantic-lex-depth nil))

;;; semantic/wisent/clojure.wy ends here
